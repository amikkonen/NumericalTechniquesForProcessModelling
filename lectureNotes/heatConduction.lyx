#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\numberwithin{equation}{section}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize 10
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\paperheight 40cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Heat conduction (diffusion)
\end_layout

\begin_layout Standard

\shape italic
The topics discussed in this section may be found in a from Versteeg and
 Malalasekara 2007, Chapter 5.
 
\begin_inset CommandInset citation
LatexCommand cite
key "versteeg2007"
literal "true"

\end_inset


\end_layout

\begin_layout Standard
In this section, we learn to implement a finite volume solver for heat conductio
n.
 This will allow us to create our own solvers for heat conduction and to
 understand more complex problems later on.
 
\end_layout

\begin_layout Standard
The goal of the finite volume method (FVM), and most other CFD methods,
 is to divide a complex continuous problem into manageable small pieces.
 An approximate solution of the original problem is expressed with a large
 number of simple arithmetic equations.
 These equations are readily assembled into a matrix and solved with a computer.
 
\end_layout

\begin_layout Standard
The main advantages of numerical solution over analytical solution is the
 ease of solving problems in complicated geometries, boundary conditions
 or with varying fluid properties.
 For such problems, analytical solutions often don't exists or are very
 time consuming to implement.
 A word of warning is, however in order: it is very easy to produce false
 results with numerical tools! Especially with commercial software.
 Therefore it is important to always verify the numerical method with a
 similar analytical solution if such is available.
 
\end_layout

\begin_layout Standard
During this course, we become familiar with the Finite Volume Method (FVM).
 Other very similar numerical methods include the Finite Element Method
 (FEM) and the Finite Difference Method (FDM).
 In general, numerical solution of fluid related problems are called Computation
al Fluid Dynamics (CFD).
 FVM method is the preferred method for fluid flow problems because of it's
 simplicity and conservativeness (mass balance etc.).
 
\end_layout

\begin_layout Subsection
Developing the equations for 1D problem
\begin_inset CommandInset label
LatexCommand label
name "subsec:Developing-the-equations"

\end_inset


\end_layout

\begin_layout Standard

\shape italic
See Versteeg and Malalasekare 
\begin_inset CommandInset citation
LatexCommand cite
key "versteeg2007"
literal "true"

\end_inset

 page 114, Section 4.1-4.3.
\end_layout

\begin_layout Standard
We will start with a 1D problem and only briefly consider 2D and 3D problems
 at the end.
 
\end_layout

\begin_layout Standard
The key concept for nearly all numerical solutions is the discretization
 of the problem.
 In the Finite Volume Method we divide the solution domain in small control
 volumes very similar to the ones used in analytical modeling, see Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Discretization-and-terminology"

\end_inset

.
 The difference is that in analytical modeling we allow to control volume
 to become infinitesimally small.
 In the 
\bar under
Finite
\bar default
 Volume Method we use some suitably small size instead.
 
\end_layout

\begin_layout Standard
Together the control volumes fill the solution domain.
 We will derive the equations for a single cell at a time.
 We will start by defining notations first.
 In general, we need information about the cell we are studying and its
 immediate neighbors.
 
\end_layout

\begin_layout Standard
We use letter 
\begin_inset Formula $P$
\end_inset

 to refer to the central point (node) of the control volume we are currently
 studying and 
\begin_inset Formula $W$
\end_inset

 (west) and 
\begin_inset Formula $E$
\end_inset

 (east) to refer to neighboring nodes as shown in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Faces-and-distances"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/heatConduction/1dDiscretization.png
	lyxscale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Discretization and terminology 
\begin_inset CommandInset label
LatexCommand label
name "fig:Discretization-and-terminology"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In addition to control volumes and nodes we also need to refer to the faces
 at control volume boundaries.
 We call these faces 
\begin_inset Formula $w$
\end_inset

 and 
\begin_inset Formula $e$
\end_inset

, see Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Heat-conduction"

\end_inset

.
 The cell size, or distance from one face to another is called 
\begin_inset Formula $\Delta x$
\end_inset

 as shown in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Heat-conduction"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/heatConduction/1dFacesAndDistances.png
	lyxscale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Faces and distances 
\begin_inset CommandInset label
LatexCommand label
name "fig:Faces-and-distances"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As a practical example, our domain could be a 100mm long metal rod and we
 could divide it in 100 control volumes, each 1mm long.
 
\end_layout

\begin_layout Standard
Let us consider one control volume, the one around node 
\begin_inset Formula $P$
\end_inset

.
 If there is a heat flux density 
\begin_inset Formula $q=-k\frac{\mathrm{d}T}{\mathrm{d}x}$
\end_inset

 from neighboring cell 
\begin_inset Formula $W$
\end_inset

, across the face 
\begin_inset Formula $w$
\end_inset

 at the boundary between nodes 
\begin_inset Formula $W$
\end_inset

 and 
\begin_inset Formula $P$
\end_inset

, to cell 
\begin_inset Formula $P$
\end_inset

, the heat flux is 
\begin_inset Formula $(qA)_{w}=-\left(kA\frac{\mathrm{d}T}{\mathrm{d}x}\right)_{w}$
\end_inset

, where 
\begin_inset Formula $A_{w}$
\end_inset

 is the face area.
 The locations are marked with subscripts.
 Similarly for the east face 
\begin_inset Formula $(qA)_{e}=-\left(kA\frac{\mathrm{d}T}{\mathrm{d}x}\right)_{e}$
\end_inset

.
\end_layout

\begin_layout Standard
If there is a mean volumetric heat source 
\begin_inset Formula $\overline{S}$
\end_inset

 inside the control volume, the total heat power is 
\begin_inset Formula $S=\overline{S}\Delta V$
\end_inset

.
 A practical example of such a source is electric heating.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/heatConduction/1dconduction.png
	lyxscale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Heat conduction
\begin_inset CommandInset label
LatexCommand label
name "fig:Heat-conduction"

\end_inset

 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Similarly to the control volume used in analytical methods, we can now collect
 the terms in a balance equation for heat as
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{alignedat}{1}(qA)_{w}-(qA)_{e}+\overline{S}\Delta V & =0\\
\Leftrightarrow\left(kA\frac{\mathrm{d}T}{\mathrm{d}x}\right)_{e}-\left(kA\frac{\mathrm{d}T}{\mathrm{d}x}\right)_{w}+\overline{S}\Delta V & =0\\
\\
\end{alignedat}
\label{eq:1dHeat}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
The Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:1dHeat"

\end_inset

 contains the essence of the Finite Volume Method.
 Using a familiar control volume approach, we have discretized our problem
 for heat fluxes.
 
\end_layout

\begin_layout Standard
What remains is to express the temperature gradients 
\begin_inset Formula $\left(\frac{\mathrm{d}T}{\mathrm{d}x}\right)_{w}$
\end_inset

 and 
\begin_inset Formula $\left(\frac{\mathrm{d}T}{\mathrm{d}x}\right)_{e}$
\end_inset

 at cell faces using temperature values at cell centers.
 If thermal conductivity 
\begin_inset Formula $k$
\end_inset

 and/or cross-section area 
\begin_inset Formula $A$
\end_inset

 varies, they must also be evaluated.
 Cross-section area 
\begin_inset Formula $A$
\end_inset

 is usually independent of the temperature and requires no special care.
 Thermal conductivity may also be known independent of the temperature and
 directly available from the geometry.
 Let us now consider the more general case when thermal conductivity depends
 on the temperature.
 
\end_layout

\begin_layout Standard
The most common way to calculate the thermal conductivity at node temperatures
 and use linear interpolation to calculate face values.
 For uniform mesh size linear interpolation gives
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\boxed{\begin{alignedat}{1}k_{w} & =\frac{k_{W}+k_{P}}{2}\\
k_{e} & =\frac{k_{E}+k_{P}}{2}
\end{alignedat}
}\label{eq:linearInterpolation}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
see Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Central-differencing"

\end_inset

 for illustration.
 If we have constant thermal conductivity 
\begin_inset Formula $k$
\end_inset

, we can ignore the interpolation in Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:linearInterpolation"

\end_inset

.
 
\end_layout

\begin_layout Standard
The most common way to discretize the gradient term is to use central differenci
ng.
 Similarly to linear interpolation, the basic idea is to assume a linear
 temperature profile between two nodes as shown in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Central-differencing"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/heatConduction/centralDifferencing.png
	lyxscale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Central differencing
\begin_inset CommandInset label
LatexCommand label
name "fig:Central-differencing"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
With uniform grid, central differencing scheme gives a temperature gradients
 at faces
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\boxed{\begin{alignedat}{1}\left(\frac{\mathrm{d}T}{\mathrm{d}x}\right)_{w} & \approx\frac{T_{P}-T_{W}}{\Delta x}\\
\left(\frac{\mathrm{d}T}{\mathrm{d}x}\right)_{e} & \approx\frac{T_{E}-T_{P}}{\Delta x}
\end{alignedat}
}\label{eq:centralDifferencing1D}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Note that for a non-uniform grid where the 
\begin_inset Formula $\Delta x$
\end_inset

 is not constant the form is slightly more complex.
 
\end_layout

\begin_layout Standard
Substituting Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:centralDifferencing1D"

\end_inset

 into Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:1dHeat"

\end_inset

 gives
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{alignedat}{1}k_{e}A_{e}\frac{T_{E}-T_{P}}{\Delta x}-k_{w}A_{w}\frac{T_{P}-T_{W}}{\Delta x}+\overline{S}\Delta V & =0\end{alignedat}
\label{eq:Conduction1Draw}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Now we have a fully discretized the equation for heat conduction!
\end_layout

\begin_layout Standard
It is often useful to rearrange Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Conduction1Draw"

\end_inset

 as
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{alignedat}{1}\frac{k_{e}A_{e}}{\Delta x}T_{E}-\frac{k_{e}A_{e}}{\Delta x}T_{P}-\frac{k_{w}A_{w}}{\Delta x}T_{P} & +\frac{k_{w}A_{w}}{\Delta x}T_{W}+\overline{S}\Delta V=0\\
\Leftrightarrow\underbrace{\left(\frac{k_{e}A_{e}}{\Delta x}+\frac{k_{w}A_{w}}{\Delta x}\right)}_{a_{P}=a_{W}+a_{E}}T_{P} & =\underbrace{\left(\frac{k_{w}A_{w}}{\Delta x}\right)}_{a_{w}}T_{W}+\underbrace{\left(\frac{k_{e}A_{e}}{\Delta x}\right)}_{a_{E}}T_{E}+\underbrace{\overline{S}\Delta V}_{S_{u}}
\end{alignedat}
\label{eq:1dConductionReady}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\Leftrightarrow\boxed{a_{P}T_{P}=a_{W}T_{W}+a_{E}T_{E}+S_{u}}\label{eq:1dConductionReadyShort}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
From Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:1dConductionReadyShort"

\end_inset

 it is easy to see the affect of different terms on 
\begin_inset Formula $T_{P}$
\end_inset

.
 If west side neighbor temperature 
\begin_inset Formula $T_{W}$
\end_inset

 increases it will increase temperature 
\begin_inset Formula $T_{P}$
\end_inset

 and the contribution is proportional to 
\begin_inset Formula $\tfrac{a_{W}}{a_{P}}$
\end_inset

.
\end_layout

\begin_layout Standard
At this point, our equation is ready for a computer, but let us make some
 sanity checks first.
 
\end_layout

\begin_layout Standard
We know that thermal conductivity 
\begin_inset Formula $k$
\end_inset

, cross-section area 
\begin_inset Formula $A$
\end_inset

 and cell size 
\begin_inset Formula $\Delta x$
\end_inset

 are positive numbers.
 Therefore 
\begin_inset Formula $a=\frac{kA}{\Delta x}$
\end_inset

 is also a positive number.
 Now, imagine that the temperature in the neighboring cell 
\begin_inset Formula $T_{W}$
\end_inset

 rises.
 What happens to the temperature in the studied cell 
\begin_inset Formula $T_{P}$
\end_inset

? According to Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:1dConductionReadyShort"

\end_inset

 it rises because 
\begin_inset Formula $a_{W}$
\end_inset

 is positive.
 This agrees with our experience.
 What if we increase thermal conductivity? Multiplier 
\begin_inset Formula $a_{W}$
\end_inset

 increases and 
\begin_inset Formula $T_{P}$
\end_inset

 reacts more to changes in 
\begin_inset Formula $T_{W}$
\end_inset

.
 Again, this agrees with our experience.
 Running a similar though experiment for 
\begin_inset Formula $a_{E}$
\end_inset

 and 
\begin_inset Formula $S_{u}$
\end_inset

 gives similar results and we can conclude that there is no obvious errors
 in our formulation.
\end_layout

\begin_layout Subsubsection
Same thing in math
\begin_inset CommandInset label
LatexCommand label
name "subsec:Same-thing-in"

\end_inset


\end_layout

\begin_layout Standard
For one-dimensional steady heat conduction (diffusion) with a volumetric
 source term, the governing equation is
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\frac{\mathrm{\mathrm{d}}}{\mathrm{d}x}\left(k\frac{\mathrm{dT}}{dx}\right)+S=0\label{eq:Goverging1dDiffusion}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $T$
\end_inset

 is the temperature and 
\begin_inset Formula $S$
\end_inset

 is the volumetric source term.
 Integrating over a control volume gives
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\int_{CV}\frac{\mathrm{\mathrm{d}}}{\mathrm{d}x}\left(k\frac{\mathrm{dT}}{dx}\right)\mathrm{d}V+\int_{CV}S\mathrm{d}V=0
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Using the Gauss divergence theorem we get
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{alignedat}{1}\int_{A}\boldsymbol{n}\cdot k\frac{\mathrm{dT}}{dx}\mathrm{d}A+\int_{CV}S\mathrm{d}V & =0\\
\Leftrightarrow\left(kA\frac{\mathrm{dT}}{dx}\right)_{e}-\left(kA\frac{\mathrm{dT}}{dx}\right)_{w}+\overline{S}\Delta V & =0
\end{alignedat}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
With central differencing, see Eqs.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:linearInterpolation"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:centralDifferencing1D"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
k_{e}A_{e}\frac{T_{E}-T_{P}}{\Delta x}-k_{w}A_{w}\frac{T_{P}-T_{W}}{\Delta x}+\overline{S}\Delta V=0\label{eq:mathRaw}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
which is the same equations as Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Conduction1Draw"

\end_inset

.
 Rearranging Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:mathRaw"

\end_inset

 results in Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:1dConductionReady"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\underbrace{\left(\frac{k_{e}A_{e}}{\Delta x}+\frac{k_{w}A_{w}}{\Delta x}\right)}_{a_{P}=a_{W}+a_{E}}T_{P}=\underbrace{\left(\frac{k_{w}A_{w}}{\Delta x}\right)}_{a_{w}}T_{W}+\underbrace{\left(\frac{k_{e}A_{e}}{\Delta x}\right)}_{a_{E}}T_{E}+\underbrace{\overline{S}\Delta V}_{S_{u}}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\Leftrightarrow\boxed{a_{P}T_{P}=a_{W}T_{W}+a_{E}T_{E}+S_{u}}
\end{equation}

\end_inset


\end_layout

\begin_layout Subsection
Boundary conditions 
\end_layout

\begin_layout Standard
In Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Developing-the-equations"

\end_inset

, we developed the discretized equations for 1D heat transfer inside the
 domain.
 In order to use the equation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:1dConductionReady"

\end_inset

 for anything real we need to give it boundary conditions.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/heatConduction/1dBoundaryA.png
	lyxscale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Left boundary
\begin_inset CommandInset label
LatexCommand label
name "fig:Boundary-conditions-1D"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The cells that touch boundaries are called boundary cells and require special
 attention.
 Let us consider cell 1 in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Boundary-conditions-1D"

\end_inset

.
 
\end_layout

\begin_layout Subsubsection
Constant temperature boundary
\end_layout

\begin_layout Standard

\shape italic
See Versteeg and Malalasekare 
\begin_inset CommandInset citation
LatexCommand cite
key "versteeg2007"
literal "true"

\end_inset

 page 118, Example 4.1.
\end_layout

\begin_layout Standard
We define a 
\series bold
constant temperature 
\series default

\begin_inset Formula $T_{A}$
\end_inset

 
\series bold
for the left boundary
\series default
.
 We note that the distance from node 1 to face A is 
\begin_inset Formula $\Delta x/2$
\end_inset

 (not all FVM meshes are build this way but the ones we use are).
 Using the same interpolation and central differencing schemes as before,
 Eqs.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:linearInterpolation"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:centralDifferencing1D"

\end_inset

, we get for the west side face in Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:1dHeat"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\left(kA\frac{\mathrm{d}T}{\mathrm{d}x}\right)_{w}\approx k_{A}A_{A}\frac{T_{P}-T_{A}}{\Delta x/2}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Substituting this in Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:1dHeat"

\end_inset

 and treating the inside face 
\begin_inset Formula $w$
\end_inset

 in the same way as before results in 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
k_{e}A_{e}\frac{T_{E}-T_{P}}{\Delta x}-k_{A}A_{A}\frac{T_{P}-T_{A}}{\Delta x/2}+\overline{S}\Delta V=0\label{eq:boundary1Draw}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Rearranging Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:boundary1Draw"

\end_inset

 gives
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{array}{cc}
\underbrace{\left(\frac{k_{e}A_{e}}{\Delta x}+\overbrace{\frac{k_{A}A_{A}}{\Delta x/2}}^{S_{P}}\right)}_{a_{P}=a_{E}+S_{P}}T_{P}=\underbrace{\left(\frac{k_{e}A_{e}}{\Delta x}\right)}_{a_{E}}T_{E}+\underbrace{\left(\frac{k_{A}A_{A}}{\Delta x/2}\right)T_{A}+\overline{S}\Delta V}_{S_{u}}\\
\Leftrightarrow a_{P}T_{P}=a_{E}T_{E}+S_{u}
\end{array}\label{eq:1dConsductionConstantTLEft}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Comparing Eqs.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:1dConductionReady"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:1dConsductionConstantTLEft"

\end_inset

 we notice a remarkable similarity.
 The 
\shape italic
east
\shape default
 side coefficient 
\begin_inset Formula $a_{E}$
\end_inset

 is unaffected.
 
\shape italic
West 
\shape default
side face doesn't exist and is replaced with source terms 
\begin_inset Formula $S_{P}$
\end_inset

 and 
\begin_inset Formula $\left(\frac{k_{A}A_{A}}{\Delta x/2}\right)T_{A}$
\end_inset

.
 The source term 
\begin_inset Formula $\overline{S}\Delta V$
\end_inset

 stays unchanged.
 This is typical of boundary conditions are simplifies matrix assembly.
 We can first assemble the inner face coefficients and volumetric sources
 and worry about boundaries later.
 More about matrix assembly later in Sec.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Matrix-assembly"

\end_inset

.
\end_layout

\begin_layout Standard
If the constant temperature is set on the 
\begin_inset Formula $B$
\end_inset

 boundary as shown in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Boundary-conditions-1D"

\end_inset

 we follow a similar procedure as for 
\begin_inset Formula $A$
\end_inset

 boundary.
 Now we replace east side coefficient 
\begin_inset Formula $a_{E}$
\end_inset

 with suitable source terms and arrive to 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{array}{cc}
\underbrace{\left(\frac{k_{w}A_{w}}{\Delta x}+\overbrace{\frac{k_{B}A_{B}}{\Delta x/2}}^{S_{P}}\right)}_{a_{P}=a_{W}+S_{P}}T_{P}=\underbrace{\left(\frac{k_{w}A_{w}}{\Delta x}\right)}_{a_{W}}T_{W}+\underbrace{\left(\frac{k_{B}A_{B}}{\Delta x/2}\right)T_{B}+\overline{S}\Delta V}_{S_{u}}\\
\Leftrightarrow a_{P}T_{P}=a_{W}T_{W}+S_{u}
\end{array}\label{eq:1dConsductionConstantTRight}
\end{equation}

\end_inset


\end_layout

\begin_layout Subsubsection
Zero gradient (insulated) boundary
\end_layout

\begin_layout Standard

\shape italic
See Versteeg and Malalasekare 
\begin_inset CommandInset citation
LatexCommand cite
key "versteeg2007"
literal "true"

\end_inset

 page 125, Example 4.3.
\end_layout

\begin_layout Standard
Zero gradient boundary for the temperature in heat conduction context means
 insulations as 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
q=-k\underbrace{\frac{\mathrm{d}T}{\mathrm{d}x}}_{0}=0
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
To apply the zero gradient boundary condition for East face in Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:1dHeat"

\end_inset

 we but the east side coefficient to zero as 
\begin_inset Formula $a_{E}=0$
\end_inset

 and from Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:1dConductionReady"

\end_inset

 we get
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{array}{cc}
\underbrace{\left(\frac{k_{w}A_{w}}{\Delta x}\right)}_{a_{P}=a_{W}}T_{P}=\underbrace{\left(\frac{k_{w}A_{w}}{\Delta x}\right)}_{a_{w}}T_{W}+\underbrace{\overline{S}\Delta V}_{S_{u}}\\
\Leftrightarrow a_{P}T_{P}=a_{W}T_{W}+S_{u}
\end{array}\label{eq:insulated1Dconduction}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
No additional source terms are needed.
 
\end_layout

\begin_layout Subsection
Matrix assembly
\begin_inset CommandInset label
LatexCommand label
name "subsec:Matrix-assembly"

\end_inset


\end_layout

\begin_layout Standard
In the previous section we have learned how to formulate the equations for
 our problem.
 Now we learn how to assemble these equations into a matrix form and feed
 it to a computer.
 We use Python for calculations.
 We want the problem in linear matrix form
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{alignedat}{1}\boldsymbol{AT} & =\boldsymbol{b}\\
\Leftrightarrow\boldsymbol{T} & \boldsymbol{=A^{-1}b}
\end{alignedat}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
which can be readily solved with almost any programming language.
 For example in Python, using Scipy reads 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/heatConduction/linSystemSolution.png
	lyxscale 20
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Linear system solution with Scipy
\begin_inset CommandInset label
LatexCommand label
name "fig:Linear-system-solution"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We but all the constant values that do not depend on 
\begin_inset Formula $T$
\end_inset

 in source vector 
\begin_inset Formula $\boldsymbol{b}$
\end_inset

 and all the multiplying coefficients of temperatures in the matrix 
\begin_inset Formula $\boldsymbol{A}$
\end_inset

.
\end_layout

\begin_layout Standard
Let us consider one-dimensional heat conduction where the left boundary
 is set at constant temperature 
\begin_inset Formula $T_{A}$
\end_inset

 and right boundary is insulated, i.e.
 
\begin_inset Formula $\frac{\mathrm{\mathrm{d}T}}{\mathrm{d}x}=0$
\end_inset

.
 We have constant fluid properties and cross-section are 
\begin_inset Formula $A$
\end_inset

.
 The domain length is 
\begin_inset Formula $L$
\end_inset

 and we divide it in 
\begin_inset Formula $n$
\end_inset

 volumes, each 
\begin_inset Formula $\Delta x=L/n$
\end_inset

 long.
 We start the cell numbering from left and use an uniform mesh.
 We have uniform volumetric heat generation 
\begin_inset Formula $\overline{S}$
\end_inset

.
\end_layout

\begin_layout Standard
For the inside cells, dividing by the constant area 
\begin_inset Formula $A$
\end_inset

 we have from Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:1dConductionReady"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{array}{cc}
\underbrace{\left(\frac{k}{\Delta x}+\frac{k}{\Delta x}\right)}_{a_{P}=a_{W}+a_{E}}T_{P}=\underbrace{\left(\frac{k}{\Delta x}\right)}_{a_{w}}T_{W}+\underbrace{\left(\frac{k}{\Delta x}\right)}_{a_{E}}T_{E}+\underbrace{S\Delta x}_{S_{u}}\\
\Leftrightarrow a_{P}T_{P}=a_{W}T_{W}+a_{E}T_{E}+S_{u}
\end{array}\label{eq:1dworkedInside}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
For left boundary, dividing by the constant area 
\begin_inset Formula $A$
\end_inset

 we have from Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:1dConsductionConstantTLEft"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{array}{cc}
\underbrace{\left(\frac{k}{\Delta x}+\overbrace{\frac{k}{\Delta x/2}}^{S_{P}}\right)}_{a_{P}=a_{E}+S_{P}}T_{P}=\underbrace{\left(\frac{k}{\Delta x}\right)}_{a_{E}}T_{E}+\underbrace{\left(\frac{k}{\Delta x/2}\right)T_{A}+\overline{S}\Delta x}_{S_{u}}\\
\Leftrightarrow a_{P}T_{P}=a_{E}T_{E}+S_{u}
\end{array}\label{eq:1DworkedLeft}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
For right boundary, dividing by the constant area 
\begin_inset Formula $A$
\end_inset

 we have from Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:insulated1Dconduction"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{array}{cc}
\underbrace{\left(\frac{k}{\Delta x}\right)}_{a_{P}=a_{W}}T_{P}=\underbrace{\left(\frac{k}{\Delta x}\right)}_{a_{w}}T_{W}+\underbrace{\overline{S}\Delta x}_{S_{u}}\\
\Leftrightarrow a_{P}T_{P}=a_{W}T_{W}+S_{u}
\end{array}\label{eq:1dWorkedRigth}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
We may now observe from Eqs.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:1dworkedInside"

\end_inset

-
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:1dWorkedRigth"

\end_inset

 that for all cells that do have a west boundary, the west face coefficient
 is the same 
\begin_inset Formula $a_{W}=\frac{k}{\Delta x}$
\end_inset

.
 The west face coefficient operates on the currently studied cell 
\begin_inset Formula $T_{P}$
\end_inset

 and the west side neighbor 
\begin_inset Formula $T_{W}$
\end_inset

.
 
\end_layout

\begin_layout Standard
Adding the west side coefficients into matrix 
\begin_inset Formula $\boldsymbol{A}$
\end_inset

 gives
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\boldsymbol{A}=\left[\begin{array}{ccccc}
0 & 0 & 0 & 0 & 0\\
-a_{W} & a_{W} & 0 & 0 & 0\\
0 & -a_{W} & a_{W} & 0 & 0\\
0 & 0 & -a_{W} & a_{W} & 0\\
0 & 0 & 0 & -a_{W} & a_{W}
\end{array}\right]\label{eq:AwithaE}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
With Python this can be done as
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/heatConduction/aWassempy.png
	lyxscale 20
	scale 50

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Similarly, for all east faces that exist the east face coefficient 
\begin_inset Formula $a_{E}=\frac{k}{\Delta x}$
\end_inset

 and the coefficient operates on the current cell and the east neighbor.
 Adding the east coefficients to already build matrix in Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:AwithaE"

\end_inset

 gives
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\boldsymbol{A}=\left[\begin{array}{ccccc}
a_{E} & -a_{E} & 0 & 0 & 0\\
-a_{W} & a_{W}+a_{E} & -a_{E} & 0 & 0\\
0 & -a_{W} & a_{W}+a_{E} & -a_{E} & 0\\
0 & 0 & -a_{W} & a_{W}+a_{E} & -a_{E}\\
0 & 0 & 0 & -a_{W} & a_{W}
\end{array}\right]
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
With Python
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/heatConduction/aEassempy.png
	lyxscale 20
	scale 50

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now we need to add the boundary conditions to our matrix 
\begin_inset Formula $\boldsymbol{A}$
\end_inset

 and source vector 
\begin_inset Formula $\boldsymbol{b}$
\end_inset

.
 
\end_layout

\begin_layout Standard
As can be seen from Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:1DworkedLeft"

\end_inset

 the constant temperature boundary condition on the left contributes terms
 
\begin_inset Formula $S_{P}=\frac{k}{\Delta x/2}$
\end_inset

 to the matrix 
\begin_inset Formula $\boldsymbol{A}$
\end_inset

 first cell diagonal.
 Adding that term gives
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\boldsymbol{A}=\left[\begin{array}{ccccc}
a_{E}+\frac{k}{\Delta x/2} & -a_{E} & 0 & 0 & 0\\
-a_{W} & a_{W}+a_{E} & -a_{E} & 0 & 0\\
0 & -a_{W} & a_{W}+a_{E} & -a_{E} & 0\\
0 & 0 & -a_{W} & a_{W}+a_{E} & -a_{E}\\
0 & 0 & 0 & -a_{W} & a_{W}
\end{array}\right]
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
The constant boundary condition also contributes a source term 
\begin_inset Formula $\left(\frac{k}{\Delta x/2}\right)T_{A}$
\end_inset

 to the first cell of the source vector.
 The resulting source vector 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\boldsymbol{b}=\begin{bmatrix}\left(\frac{k}{\Delta x/2}\right)T_{B} & 0 & 0 & 0 & 0\end{bmatrix}^{T}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
With Python the constant boundary condition is added as 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/heatConduction/pythonContantleft.png
	lyxscale 20
	scale 50

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The insulated boundary on the right produces no coefficients as no heat
 is transfered through the boundary.
 Nothing needs to be done.
\end_layout

\begin_layout Standard
As the final step, we need to add the volumetric source to our source vector
 
\begin_inset Formula $\boldsymbol{b}$
\end_inset

.
 The volumetric source is the same in all Eqs.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:1dworkedInside"

\end_inset

-
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:1dWorkedRigth"

\end_inset

, 
\begin_inset Formula $S_{u}=S\Delta x$
\end_inset

.
 By adding it to the source vector we get
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\boldsymbol{b}=\begin{bmatrix}\left(\frac{k}{\Delta x/2}\right)T_{A}+S\Delta x & S\Delta x & S\Delta x & S\Delta x & S\Delta x\end{bmatrix}^{T}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
With Python this can be done with vectorized statement as 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/heatConduction/pythonSource.png
	lyxscale 20
	scale 50

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now our linear system is ready and we can solve as shown in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Linear-system-solution"

\end_inset

.
 The full system reads
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\begin{array}{cc}
\underbrace{\left[\begin{array}{ccccc}
a_{E}+\frac{k}{\Delta x/2} & -a_{E} & 0 & 0 & 0\\
-a_{W} & a_{W}+a_{E} & -a_{E} & 0 & 0\\
0 & -a_{W} & a_{W}+a_{E} & -a_{E} & 0\\
0 & 0 & -a_{W} & a_{W}+a_{E} & -a_{E}\\
0 & 0 & 0 & -a_{W} & a_{W}
\end{array}\right]}_{\boldsymbol{A}}\underbrace{\begin{bmatrix}T_{1}\\
T_{2}\\
T_{3}\\
T_{4}\\
T_{5}
\end{bmatrix}}_{\boldsymbol{T}}=\underbrace{\begin{bmatrix}\left(\frac{k}{\Delta x/2}\right)T_{A}+S\Delta x\\
S\Delta x\\
S\Delta x\\
S\Delta x\\
S\Delta x
\end{bmatrix}}_{\boldsymbol{b}}\end{array}
\]

\end_inset


\end_layout

\begin_layout Standard
It's a good idea to check your code in as small increments as possible.
 Print out your coefficients and matrices during development and compare
 them with known values.
 Debugging of small pieces is easier that large ones.
 Software companies have teams of designated testers working in their companies
 with the sole purpose of finding bugs.
 Do it early.
\end_layout

\begin_layout Standard
You can plot the solutions with Python as 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/heatConduction/1dcondicitpPlot.png
	lyxscale 20
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/heatConduction/1dcondicitpPlotResult.png
	lyxscale 20
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Plotting
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Transient
\end_layout

\begin_layout Standard

\shape italic
See Versteeg and Malalasekare 
\begin_inset CommandInset citation
LatexCommand cite
key "versteeg2007"
literal "true"

\end_inset

 page 243, Chapter 8.
\end_layout

\begin_layout Standard
There are many different methods to tackle the time derivative term in one-dimen
sional heat conduction 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\rho c\frac{\partial T}{\partial t}=\frac{\partial}{\partial x}\left(k\frac{\partial T}{\partial x}\right)+S\label{eq:unsteady1Dconduction}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
were 
\begin_inset Formula $\rho$
\end_inset

 is density, 
\begin_inset Formula $c$
\end_inset

 is specific heat capacity.
 The partial derivate 
\begin_inset Formula $\frac{\partial T}{\partial t}$
\end_inset

 mean that we now have two different derivatives, 
\begin_inset Formula $\frac{\partial T}{\partial t}$
\end_inset

, and 
\begin_inset Formula $\frac{\partial T}{\partial x}$
\end_inset

.
 
\end_layout

\begin_layout Standard
We will try to avoid mathematics as much as possible.
 For a more formal approach, see 
\shape italic
Versteeg and Malalasekare 
\begin_inset CommandInset citation
LatexCommand cite
key "versteeg2007"
literal "true"

\end_inset

.
\end_layout

\begin_layout Standard
Let us first consider the left hand side of Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:unsteady1Dconduction"

\end_inset

, 
\begin_inset Formula $\rho c\frac{\partial T}{\partial t}$
\end_inset

 .
 We may discretized it as 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\rho c\frac{\partial T}{\partial t}\approx\rho c\frac{T-T^{0}}{\Delta t}\label{eq:timeDiscretisation}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $\Delta t$
\end_inset

 is time step and 
\begin_inset Formula $T^{0}$
\end_inset

 is temperature from previous time step.
 If we now substitute Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:timeDiscretisation"

\end_inset

 into Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:unsteady1Dconduction"

\end_inset

 we get
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{alignedat}{1}\rho c\frac{T-T^{0}}{\Delta t} & =\frac{\partial}{\partial x}\left(k\frac{\partial T}{\partial x}\right)+S\end{alignedat}
\label{eq:time}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Using FVM to the left hand side of Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:time"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\int_{CV}\rho c\frac{T-T^{0}}{\Delta t}dV\approx\rho cA\frac{T-T^{0}}{\Delta t}\Delta x\label{eq:timeVol}
\end{equation}

\end_inset

We may now recognize the right hand side of Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:timeVol"

\end_inset

, 
\begin_inset Formula $\frac{\partial}{\partial x}\left(k\frac{\partial T}{\partial x}\right)+S$
\end_inset

 as the governing equation for steady state heat conduction, Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Goverging1dDiffusion"

\end_inset

.
 We may use the FVM methods described before to discretize it.
 
\end_layout

\begin_layout Standard
The remaining choice is at what time to we evaluate the right hand side
 of Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:time"

\end_inset

.
 If we choose to evaluate it at the last time step corresponding to 
\begin_inset Formula $T^{0}$
\end_inset

, we get explicit Euler scheme.
 Explicit Euler requires very small time steps and is rarely suitable.
 
\end_layout

\begin_layout Standard
We choose to use the new time.
 This is called implicit Euler scheme.
 Implicit Euler is unconditionally stable and easy to use.
 For more temporal accuracy, look in to Runge-Kutta or other higher order
 schemes.
\end_layout

\begin_layout Standard
With FVM and Implicit Euler we get from Eqs.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:time"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:timeVol"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:1dConductionReady"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{array}{cc}
\underbrace{\rho cA\frac{\Delta x}{\Delta t}}_{a_{P}^{0}}(T_{P}-T_{P}^{0})+\underbrace{\left(\frac{k_{e}A_{e}}{\Delta x}+\frac{k_{w}A_{w}}{\Delta x}\right)}_{a_{W}+a_{E}}T_{P}=\underbrace{\left(\frac{k_{w}A_{w}}{\Delta x}\right)}_{a_{w}}T_{W}+\underbrace{\left(\frac{k_{e}A_{e}}{\Delta x}\right)}_{a_{E}}T_{E}+\underbrace{\overline{S}\Delta V}_{S_{u}}\\
\Leftrightarrow a_{P}^{0}T_{P}-a_{P}^{0}T_{P}^{0}+a_{W}T_{P}+a_{E}T_{P}=a_{w}T_{W}+a_{E}T_{E}+S_{u}\\
\Leftrightarrow\boxed{\underbrace{(a_{P}^{0}+a_{W}+a_{E})}_{a_{P}}T_{P}=a_{w}T_{W}+a_{E}T_{E}+a_{P}^{0}T_{P}^{0}+S_{u}}\\
\\
\end{array}\label{eq:1DconductionUnsteady}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
From Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:1DconductionUnsteady"

\end_inset

, we see that the solution of one time step in the transient case is very
 similar to the steady state one.
 We only have two extra terms, 
\begin_inset Formula $a_{P}^{0}$
\end_inset

 in the 
\begin_inset Formula $a_{P}$
\end_inset

 term and 
\begin_inset Formula $a_{P}^{0}T_{P}^{0}$
\end_inset

.
 The 
\begin_inset Formula $a_{P}^{0}$
\end_inset

 remains constant during time steps and can be added to the coefficient
 matrix.
 In Python 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/heatConduction/1dTimeAP0.png
	lyxscale 20
	scale 50

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The source term 
\begin_inset Formula $a_{P}^{0}T_{P}^{0}$
\end_inset

 changes with temperature and has to updated during every time step.
 It is often convenient to collect the time-independent terms into a separate
 source vector, see 
\shape italic
bConstant
\shape default
 in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Time-stepping"

\end_inset

.
 This often results in simpler and faster code.
 
\end_layout

\begin_layout Standard
To progress the solution, repeat the process in a loop.
 An example is given in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Time-stepping"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/heatConduction/timeStepping.png
	lyxscale 20
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Time stepping
\begin_inset CommandInset label
LatexCommand label
name "fig:Time-stepping"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
2D and 3D cases
\begin_inset CommandInset label
LatexCommand label
name "subsec:2D-and-3D"

\end_inset


\end_layout

\begin_layout Standard

\shape italic
See Versteeg and Malalasekare 
\begin_inset CommandInset citation
LatexCommand cite
key "versteeg2007"
literal "true"

\end_inset

 page 129, Chapter 4.4-4.5.
\end_layout

\begin_layout Standard
Extension from 1D to 2D or 3D is straightforward.
 We again form a control volume and add all the fluxes in a balance equation.
 It is customary to use North and South (N,S) as names for the upper and
 lower neighbors.
 See Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:2D-control-volume"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/heatConduction/2dConductionNotation.png
	lyxscale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset space \hspace{}
\length 0.8cm
\end_inset


\begin_inset Graphics
	filename figures/heatConduction/2dConductionCV.png
	lyxscale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
2D notations and control volume 
\begin_inset CommandInset label
LatexCommand label
name "fig:2D-control-volume"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Forming a balance equation for 2D heat conduction results in
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{alignedat}{1}(qA)_{w}-(qA)_{e}+(qA)_{s}-(qA)_{n}+\overline{S}\Delta V & =0\\
\Leftrightarrow\left(kA\frac{\mathrm{d}T}{\mathrm{d}x}\right)_{e}-\left(kA\frac{\mathrm{d}T}{\mathrm{d}x}\right)_{w}+\left(kA\frac{\mathrm{d}T}{\mathrm{d}x}\right)_{n}-\left(kA\frac{\mathrm{d}T}{\mathrm{d}x}\right)_{s}+\overline{S}\Delta V & =0\\
\\
\end{alignedat}
\label{eq:2DrawConduction}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
With the finite volume method, using central differencing and linear interpolati
on Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:2DrawConduction"

\end_inset

 gives
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{alignedat}{1}\underbrace{\left(\frac{k_{e}A_{e}}{\Delta x}+\frac{k_{w}A_{w}}{\Delta x}+\frac{k_{s}A_{s}}{\Delta y}+\frac{k_{n}A_{n}}{\Delta y}\right)}_{a_{P}=a_{W}+a_{E}+a_{S}+a_{N}}T_{P} & =\underbrace{\left(\frac{k_{w}A_{w}}{\Delta x}\right)}_{a_{W}}T_{W}+\underbrace{\left(\frac{k_{e}A_{e}}{\Delta x}\right)}_{a_{E}}T_{E}\\
 & \;\;+\underbrace{\left(\frac{k_{s}A_{s}}{\Delta y}\right)}_{a_{S}}T_{S}+\underbrace{\left(\frac{k_{n}A_{n}}{\Delta y}\right)}_{a_{N}}T_{N}\\
 & \;\;+\underbrace{\overline{S}\Delta V}_{S_{u}}
\end{alignedat}
\label{eq:2dconduction}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\Leftrightarrow\boxed{a_{P}T_{P}=a_{W}T_{W}+a_{E}T_{E}+a_{S}T_{S}+a_{N}T_{N}+S_{u}}\label{eq:2dconductionShrt}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
As we can see from Eqs.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:2dconduction"

\end_inset

-
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:2dconductionShrt"

\end_inset

, the extension from 1D to 2D only bring a couple of new terms to the equation.
 The structure remains the same.
 
\end_layout

\begin_layout Standard
Similarly, extension from 2D to 3D would give two more terms.
 The extra directions are usually named Bottom and Top (B and T).
\end_layout

\begin_layout Standard
The author would recommend motivated students to derive the Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:2dconduction"

\end_inset

 and to program a 2D solver.
 The geometry and code is still relatively easy to understand.
 3D solver code becomes rather complicated and mostly teaches programming
 with very little new to learn about FVM.
\end_layout

\begin_layout Standard
If you program your own solver in 2D or 3D, it is highly recommended to
 use sparse matrices, see extra material in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Performance-issues-with"

\end_inset

.
\end_layout

\begin_layout Subsection
Notations
\end_layout

\begin_layout Standard
One we move from 1D to 2D or 3D, the full notation of partial differential
 equations quickly becomes cumbersome.
 Using a 3D heat conduction as an example, the full form is 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\frac{\partial}{\partial x}\left(k\frac{\partial T}{\partial x}\right)+\frac{\partial}{\partial y}\left(k\frac{\partial T}{\partial y}\right)+\frac{\partial}{\partial z}\left(k\frac{\partial T}{\partial z}\right)+S=0\label{eq:3dconductionFull}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
it is customary to use either a vector or tensor notation instead.
 With vector notation Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:3dconductionFull"

\end_inset

 becomes
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\nabla\cdot k\nabla T+S=0
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
and with tensor notation
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\frac{\partial}{\partial x_{j}}\left(k\frac{\partial T}{\partial x_{j}}\right)+S=0\label{eq:conductionTensor}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Both vector and tensor notations are widely used in the literature.
 It's rather necessary to understand them and they will be used on this
 course.
 For index notation see Appendix 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Tensor-notation"

\end_inset

.
\end_layout

\begin_layout Subsection
Extra material
\end_layout

\begin_layout Standard

\shape italic
Extra material.
 Not needed on this course.
\end_layout

\begin_layout Subsubsection
Performance issues with example codes
\begin_inset CommandInset label
LatexCommand label
name "subsec:Performance-issues-with"

\end_inset


\end_layout

\begin_layout Standard

\shape italic
Extra material.
 Not needed on this course.
\end_layout

\begin_layout Standard
All the examples are written with clarity in mind.
 They usually sacrifice performance for this goal.
 The most important performance limiting factor is the use of dense matrices.
 
\end_layout

\begin_layout Standard
The multiplying matrix 
\begin_inset Formula $\boldsymbol{A}$
\end_inset

 is mostly empty in most FVM problems, i.e.
 mostly filled with zeros.
 It would be a LOT faster to use sparse matrices.
 With large systems, sparse matrices are decades faster that dense matrices.
 Sparseness also saves memory.
\end_layout

\begin_layout Standard
The Python syntax for sparse matrices is rather verbose, but straightforward
 to use.
 Do not be frightened by the long commands.
 You can usually just copy-paste it from your previous codes or create a
 wrapper.
 For an example wrapper, see Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Sparse-matrix-wrapper"

\end_inset

.
 For more detail, see https://docs.scipy.org/doc/scipy/reference/sparse.html.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/heatConduction/sparseMatrix.png
	lyxscale 20
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Sparse matrix wrapper class 
\begin_inset CommandInset label
LatexCommand label
name "fig:Sparse-matrix-wrapper"

\end_inset

 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We often use unnecessary loops.
 Looping is slow in Python and indexing of large matrices is also unnecessary.
 As rule of a thumb, always use vectorized commands if you can.
 
\end_layout

\begin_layout Subsubsection
Application to other physics
\end_layout

\begin_layout Standard

\shape italic
Extra material.
 Not needed on this course.
\end_layout

\begin_layout Standard
Many problems in other fields are very similar to heat conduction.
 Here are some examples.
\end_layout

\begin_layout Paragraph
Moisture transfer in building materials
\end_layout

\begin_layout Standard
Heat and moisture transport in porous building materials is very similar
 to the pure heat conduction we have considered here.
 Below are the governing equations for heat and moisture transport.
 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{alignedat}{1}\left(c_{m}\rho_{m}+c_{w}w\right)\frac{\partial T}{\partial t} & =-\nabla\cdot\left(-\underbrace{k\nabla T}_{\mathrm{cond}}+\underbrace{r_{a}\rho_{a}c_{p,a}T+g_{v}h_{w}}_{\mathrm{conv}}\right)\end{alignedat}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{alignedat}{1}\frac{\partial w}{\partial t} & =-\nabla\cdot\left(\left[\underbrace{-\delta_{p}(w)\nabla p_{v}}_{\text{diffusion}}+\underbrace{\boldsymbol{r}_{a}v}_{\text{convection}}\right]+\left[K\left(w\right)\nabla p_{suc}\right]\right)\end{alignedat}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
The physical phenomena is different, but the equations are very similar.
\end_layout

\begin_layout Paragraph
Electric heating
\end_layout

\begin_layout Standard
Electric potential be solved from the well-known Poisson equation (same
 as heat conduction equation)
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\nabla\cdot\sigma\nabla\phi=0\label{eq:electricPotential}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $\phi$
\end_inset

 is electric potential.
 Electric field 
\begin_inset Formula $\boldsymbol{E}$
\end_inset

 is solved from
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\boldsymbol{E=}-\nabla\phi
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
and electric current density 
\begin_inset Formula $\boldsymbol{J}$
\end_inset

 from
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\boldsymbol{J}=\sigma\boldsymbol{E}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
and finally the volumetric electric heating power 
\begin_inset Formula $p$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
p=\frac{\partial P}{\mathit{\partial}V}=\boldsymbol{J}\cdot\boldsymbol{E}\boldsymbol{=\boldsymbol{J}\cdot\boldsymbol{J}/\sigma=\frac{\mid\boldsymbol{J}\mid^{2}}{\sigma}}\label{eq:JouleHeating}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Electric conductivity can be calculated from electric resistivity 
\begin_inset Formula $\rho$
\end_inset

 as
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\sigma=\frac{1}{\rho}
\end{equation}

\end_inset


\end_layout

\begin_layout Paragraph
Linear Mechanics
\end_layout

\begin_layout Standard
For small deformations
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align}
-\nabla\cdot\boldsymbol{\sigma} & =\boldsymbol{f}\label{eq:linearMech}\\
\boldsymbol{\sigma} & =\lambda\nabla\cdot\boldsymbol{u}\boldsymbol{\mathrm{I}}+2\mu\mathrm{\boldsymbol{D}}
\end{align}

\end_inset


\end_layout

\begin_layout Standard
The resulting equation is a similar linear system as for heat conduction
 and can be solved with the same methods.
 
\end_layout

\begin_layout Standard
The stress equation is very similar to that in Navier-Stokes equations.
 If we remove movement related terms from Navier-Stokes equations, we end
 up with an equation very similar to Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:linearMech"

\end_inset

.
\end_layout

\end_body
\end_document
