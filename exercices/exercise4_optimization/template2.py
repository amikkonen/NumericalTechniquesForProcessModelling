# -*- coding: utf-8 -*-
import numpy as np
from matplotlib import pyplot as plt
from scipy import optimize, interpolate

# Measurement data
Nu = np.array([
                52.094799999999999, 
                52.091000000000001, 
                51.797800000000002, 
                50.491700000000002, 
                46.4358, 
                40.064599999999999, 
                35.719299999999997, 
                34.847299999999997, 
                35.711799999999997, 
                36.142400000000002, 
                35.125599999999999, 
                32.661700000000003, 
                29.7636, 
                27.154900000000001, 
                25.2698, 
                23.240100000000002, 
                21.789100000000001, 
                20.1937, 
                18.887499999999999, 
                18.015499999999999, 
                16.853899999999999, 
                15.9819, 
                15.109999999999999, 
                14.2379, 
                13.8001, 
                13.072900000000001, 
                12.6351, 
                12.196999999999999, 
                12.0487, 
                11.321300000000001, 
                11.0284, 
                10.590299999999999, 
                10.2972, 
                9.5699900000000007, 
                9.5660799999999995, 
                9.4178499999999996, 
                9.4140700000000006, 
                8.8312899999999992, 
                8.6830700000000007
            ]) 
rd = np.array([
            0.15285499999999999, 
            0.30942500000000001, 
            0.46598499999999998, 
            0.61691600000000002, 
            0.77334000000000003, 
            0.92408999999999997, 
            1.0805, 
            1.2314499999999999, 
            1.38805, 
            1.53905, 
            1.6955800000000001, 
            1.8464700000000001, 
            2.0029400000000002, 
            2.1594099999999998, 
            2.3159100000000001, 
            2.4668199999999998, 
            2.6233399999999998, 
            2.7686700000000002, 
            2.9251900000000002, 
            3.0761400000000001, 
            3.2382599999999999, 
            3.3892099999999998, 
            3.5401500000000001, 
            3.6966899999999998, 
            3.8476499999999998, 
            3.9986100000000002, 
            4.1495699999999998, 
            4.3117200000000002, 
            4.4626900000000003, 
            4.6192299999999999, 
            4.7646100000000002, 
            4.9267599999999998, 
            5.0777200000000002, 
            5.2286799999999998, 
            5.3908399999999999, 
            5.5362200000000001, 
            5.6927899999999996, 
            5.8549300000000004, 
            6.0003099999999998
        ])

# Plot measurement
plt.plot(rd, Nu, "d", label="measurement")

# Interpolation
rd_interp = np.linspace(rd.min(),rd.max())
Nu_interp = interpolate.interp1d(rd, Nu)(rd_interp)
# print(Nu_interp )

plt.plot(rd_interp, Nu_interp )

# Fitting an exponentially decreasing function
rd_min = 2
mask = rd > rd_min
# print(mask)
rd_masked = rd[mask]
Nu_masked = Nu[mask]

# print(rd_masked)

# Function to fit
def func(x, 
    return 

# Fitting 
#popt, pcov =

# plotting with latex rendering
#rd_fit = np.linspace(rd_min,6)
#plt.plot(rd_fit, func(rd_fit, popt[0],popt[1],popt[2]), 'r-',
         # label='$ae^{-bx}+c$\n a=%5.3f \n b=%5.3f \n c=%5.3f' % tuple(popt))

# # Prettyfy plot
# plt.xlim(0,6)
# plt.ylabel("Nu")
# plt.xlabel("r/d")
# plt.legend(frameon=False)
